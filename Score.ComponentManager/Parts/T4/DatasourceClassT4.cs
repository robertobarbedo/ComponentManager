// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Score.ComponentManager.Parts.T4
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class DatasourceClassT4 : DatasourceClassT4Base
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n/**Generated Code**/\r\nusing Score.Custom.FieldTypes;\r\nusing Score.Data.Extensio" +
                    "ns;\r\nusing Score.UI.Data.DatasourceItems;\r\nusing Sitecore.Data;\r\nusing Sitecore." +
                    "Data.Fields;\r\nusing Sitecore.Data.Items;\r\nusing Sitecore.Data.Fields;\r\n \r\nnamesp" +
                    "ace ");
            
            #line 17 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Args.ProjectName));
            
            #line default
            #line hidden
            this.Write(".Data.CustomItems\r\n{\r\n    public partial class ");
            
            #line 19 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Args.ComponentName));
            
            #line default
            #line hidden
            this.Write("Item : ScoreUIItem\r\n    {\r\n        protected internal ");
            
            #line 21 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Args.ComponentName));
            
            #line default
            #line hidden
            this.Write("Item(Item item)\r\n            : base(item)\r\n        {\r\n            ");
            
            #line 24 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
foreach (var field in Args.DatasourceFields) {  
            
            #line default
            #line hidden
            this.Write("            ");
            
            #line 25 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToCSharp(field.Name)));
            
            #line default
            #line hidden
            this.Write(" = item.Fields[FieldIDs.");
            
            #line 25 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToCSharp(field.Name)));
            
            #line default
            #line hidden
            this.Write("];\r\n            ");
            
            #line 26 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
}
            
            #line default
            #line hidden
            this.Write("        }\r\n \r\n\r\n        ");
            
            #line 30 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
foreach (var field in Args.DatasourceFields) {  
            
            #line default
            #line hidden
            this.Write("        public ");
            
            #line 31 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetFieldType(field.Type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 31 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToCSharp(field.Name)));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n        ");
            
            #line 32 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
}
            
            #line default
            #line hidden
            this.Write("         \r\n        ");
            
            #line 34 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
foreach (var field in Args.DatasourceFields) {  
            
            #line default
            #line hidden
            this.Write("        public virtual bool Has");
            
            #line 35 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToCSharp(field.Name)));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n            get { return ");
            
            #line 37 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToCSharp(field.Name)));
            
            #line default
            #line hidden
            this.Write(" != null && !string.IsNullOrWhiteSpace(");
            
            #line 37 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToCSharp(field.Name)));
            
            #line default
            #line hidden
            this.Write(".Value); }\r\n        }\r\n\r\n        ");
            
            #line 40 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n        #region [ Operators ]\r\n        public static implicit operator ");
            
            #line 43 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Args.ComponentName));
            
            #line default
            #line hidden
            this.Write("Item(Item innerItem)\r\n        {\r\n            return innerItem == null ? null : ne" +
                    "w ");
            
            #line 45 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Args.ComponentName));
            
            #line default
            #line hidden
            this.Write("Item(innerItem);\r\n        }\r\n \r\n        public static implicit operator Item(");
            
            #line 48 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Args.ComponentName));
            
            #line default
            #line hidden
            this.Write("Item customItem)\r\n        {\r\n            return customItem == null ? null : custo" +
                    "mItem.InnerItem;\r\n        }\r\n \r\n        public static bool TryParse(Item item, o" +
                    "ut ");
            
            #line 53 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Args.ComponentName));
            
            #line default
            #line hidden
            this.Write("Item parsedItem)\r\n        {\r\n            parsedItem = item == null || !item.IsDer" +
                    "ived(Template) ? null : new ");
            
            #line 55 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Args.ComponentName));
            
            #line default
            #line hidden
            this.Write("Item(item);\r\n            return parsedItem != null;\r\n        }\r\n        #endregio" +
                    "n\r\n        \r\n        #region [ Template ]\r\n        public static ID Template { g" +
                    "et { return new ID(\"");
            
            #line 61 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Args.TemplateID));
            
            #line default
            #line hidden
            this.Write("\"); } }\r\n        \r\n        public static class FieldNames \r\n        {\r\n          " +
                    "  ");
            
            #line 65 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
foreach (var field in Args.DatasourceFields) {  
            
            #line default
            #line hidden
            this.Write("            public static string ");
            
            #line 66 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToCSharp(field.Name)));
            
            #line default
            #line hidden
            this.Write(" { get { return \"");
            
            #line 66 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("\"; } }\r\n            ");
            
            #line 67 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
}
            
            #line default
            #line hidden
            this.Write("        }\r\n        public static class FieldIDs\r\n        {\r\n            ");
            
            #line 71 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
foreach (var field in Args.DatasourceFields) {  
            
            #line default
            #line hidden
            this.Write("            public static string ");
            
            #line 72 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToCSharp(field.Name)));
            
            #line default
            #line hidden
            this.Write(" { get { return \"");
            
            #line 72 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.ID));
            
            #line default
            #line hidden
            this.Write("\"; } }\r\n            ");
            
            #line 73 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"
}
            
            #line default
            #line hidden
            this.Write("        }\r\n        #endregion\r\n    }\r\n}\r\n\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 80 "C:\Projects\CM\Score.ComponentManager\Score.ComponentManager\Parts\T4\DatasourceClassT4.tt"

public string ToCSharp(string name)
{
    name = name ?? "";
    return name.Replace(" ","").Replace("-","_").Replace(".","");
}

public string GetFieldType(string typeName)
{
    var fieldType = "CustomField";
     
    switch (typeName.ToLower())
    {
        case "tracking":
            fieldType = "Sitecore.Analytics.Data.TrackingField";
            break;
        
        //SIMPLE TYPES FIELDS:
        case "checkbox":
            fieldType = "CheckboxField";
            break;
        
        case "date":
        case "datetime":
            fieldType = "DateField";
            break;
        
        case "file":
            fieldType = "FileField";
            break;
        
        case "image":
            fieldType = "ImageField";
            break;
        
        case "rich text":
            fieldType = "HtmlField";
            break;
        
        case "integer":
        case "number":
        case "password":
        case "single-line text":
        case "multi-line text":
            fieldType = "TextField";
            break;
        
        case "word document":
            fieldType = "WordDocumentField";
            break;
        
        //SOCIAL FIELDS
        case "accounts multilist":
            fieldType = "MultilistField";
            break;
        
        case "campaign tree":
            fieldType = "ReferenceField";
            break;
        
        case "countable edit":
            fieldType = "TextField";
            break;
        
        //LIST FIELDS
        case "checklist":
        case "multilist":
        case "multilist with search":
        case "treelist":
        case "treelistex":
            fieldType = "MultilistField";
            break;
            
        case "droplist":
            fieldType = "ValueLookupField";
            break;
            
        case "grouped droplink":
        case "grouped droplist":
            fieldType = "GroupedDroplinkField";
            break;
            
        case "name lookup value list":
        case "name value list":
            fieldType = "NameValueListField";
            break;
            
        //LINK FIELDS
        case "droplink":
            fieldType = "LookupField";
            break;
            
        case "droptree":
            fieldType = "ReferenceField";
            break;
            
        case "general link":
        case "general link with search":
            fieldType = "LinkField";
            break;
            
        case "version link":
            fieldType = "VersionLinkField";
            break;
            
        //SYSTEM FIELDS
        case "custom":
            fieldType = "CustomCustomField";
            break;
            
        case "datasource":
            fieldType = "DatasourceField";
            break;
            
        case "file drop area":
            fieldType = "FileDropAreaField";
            break;
            
        case "internal link":
            fieldType = "InternalLinkField";
            break;
            
        case "page preview":
            fieldType = "PagePreviewField";
            break;
            
        case "rendering datasource":
            fieldType = "RenderingDatasourceField";
            break;
            
        case "rules":
            fieldType = "RulesField";
            break;
            
        case "security":
            fieldType = "TextField";
            break;
            
        case "template field source":
            fieldType = "TemplateFieldSourceField";
            break;
            
        case "thumbnail":
            fieldType = "ThumbnailField";
            break;
            
        //DEPRECATED  FIELDS
        case "html":
            fieldType = "HtmlField";
            break;
            
        case "link":
            fieldType = "LinkField";
            break;
            
        case "lookup":
            fieldType = "LookupField";
            break;
            
        case "memo":
        case "text":
            fieldType = "TextField";
            break;
            
        case "reference":
            fieldType = "ReferenceField";
            break;
            
        case "tree":
            fieldType = "ReferenceField";
            break;
            
        case "tree list":
        case "treelist with search":
            fieldType = "MultilistField";
            break;
            
        case "valuelookup":
            fieldType = "ValueLookupField";
            break;
            
                
        //SCORE FIELDS
        case "raw text":
        case "users and roles":
        case "geolocation":
        case "youtubevideo":
        case "kaltura":
        case "vimeo":
        case "brightcove":
        case "simple colorpicker":
            fieldType = "TextField";
            break;
            
        case "custom treelist":
            fieldType = "MultilistField";
            break;
            
        case "picture":
            fieldType = "ImageField";
            break;
            
        
        //DEFAULT
        default:
            fieldType = "CustomField";
            break;
    }
 
    return fieldType;
}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class DatasourceClassT4Base
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
